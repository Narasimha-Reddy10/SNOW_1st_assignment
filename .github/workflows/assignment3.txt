CREATE OR REPLACE DATABASE ASSIGNMENT3;
CREATE OR REPLACE SCHEMA ASSIGNMENT3.PERSON_SCHEMA3;
 
SHOW ROLES;
show SCHEMAS;
 
-- Create a file format for JSON
CREATE OR REPLACE FILE FORMAT MY_JSON_FORMAT
TYPE = 'JSON'
;
 
-- Create Stage: 
CREATE OR REPLACE STAGE ASSIGNMENT3.PERSON_SCHEMA3.PERSON_DATA_JSON_A3
URL='s3://snowflake-assignment-3/assignment3/'
CREDENTIALS = (AWS_KEY_ID = 'xxxxxxxxxxxxxxxxxxxxxxxxx' 
               AWS_SECRET_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxx')
FILE_FORMAT = ASSIGNMENT3.PERSON_SCHEMA3.MY_JSON_FORMAT;
 
 
list @ASSIGNMENT3.PERSON_SCHEMA3.PERSON_DATA_JSON_A3;
 
desc stage ASSIGNMENT3.PERSON_SCHEMA3.PERSON_DATA_JSON_A3;

-- CREATE table in Snowflake with VARIANT column.
CREATE OR REPLACE TABLE PERSON (PERSONDATA VARIANT);
 
-- Create a Snowpipe with Auto Ingest Enabled
 
CREATE OR REPLACE PIPE ASSIGNMENT3.PERSON_SCHEMA3.person_pipe AUTO_INGEST = TRUE AS
COPY INTO PERSON
FROM ( 
    SELECT $1 
    FROM @ASSIGNMENT3.PERSON_SCHEMA3.PERSON_DATA_JSON_A3
)
FILE_FORMAT = (FORMAT_NAME = 'ASSIGNMENT3.PERSON_SCHEMA3.MY_JSON_FORMAT')
ON_ERROR = 'CONTINUE';
 
 
alter pipe person_pipe refresh;
 
 
SELECT * FROM PERSON;
 
-- lISTING
SHOW PIPES;
 

-- Check the pipe status using the below command, it shows RUNNIG and it will also show the pendingFileCount.
 
select system$pipe_status('person_pipe');
 
-- Check COPY_HISTORY of the table to see any loading errors
select * from table (information_schema.
copy_history(table_name=>'person',start_time=>dateadd(hours,-1, current_timestamp())));
 
 
-- Create stream
 
create or replace stream person_stream on table person;
 
 
desc stream person_stream;
 
SELECT * FROM person_stream;
 
-- to get the arn to configure the event notification on AWS 
desc pipe PERSON_PIPE;
 
 
-- create Table - age 
CREATE TABLE PERSON_AGE (
    Name VARCHAR(100),
    Age INT
);
 
-- create Table - location 
CREATE TABLE PERSON_LOCATION (
    Name VARCHAR(100),
    Location VARCHAR(100)
);
 
 
CREATE OR REPLACE TABLE PERSON_MASTER (
    Id int,
    Name STRING,
    Age INT,
    Location STRING,
    Zip STRING
);
 
SELECT * FROM PERSON_MASTER;
 
 
 
CREATE OR REPLACE PROCEDURE ASSIGNMENT3.PERSON_SCHEMA3.upload_person_data()
RETURNS STRING
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS
$$
var sqlTextMerge = `
    MERGE INTO ASSIGNMENT3.PERSON_SCHEMA3.PERSON_MASTER P
    USING (
        SELECT 
            S.PERSONDATA:ID::INT AS ID,
            S.PERSONDATA:Name::STRING AS NAME,
            S.PERSONDATA:age::STRING AS AGE,
            S.PERSONDATA:location::STRING AS LOCATION,
            S.PERSONDATA:zip::STRING AS ZIP
        FROM ASSIGNMENT3.PERSON_SCHEMA3.person_stream S
        WHERE S.METADATA$ACTION = 'INSERT' OR S.METADATA$ISUPDATE = 'TRUE'
    ) S
    ON P.ID = S.ID
    WHEN MATCHED THEN
        UPDATE SET
            P.NAME = S.NAME,
            P.AGE = S.AGE,
            P.LOCATION = S.LOCATION,
            P.ZIP = S.ZIP
    WHEN NOT MATCHED THEN
        INSERT (ID, NAME, AGE, LOCATION, ZIP)
        VALUES (S.ID, S.NAME, S.AGE, S.LOCATION, S.ZIP);
`;
 
var sqlTextInsert1 = `
    INSERT INTO ASSIGNMENT3.PERSON_SCHEMA3.PERSON_AGE (Name, Age)
    SELECT NAME, AGE
    FROM ASSIGNMENT3.PERSON_SCHEMA3.PERSON_MASTER;
`;
 
var sqlTextInsert2 = `
    INSERT INTO ASSIGNMENT3.PERSON_SCHEMA3.PERSON_LOCATION (Name, LOCATION)
    SELECT NAME, LOCATION
    FROM ASSIGNMENT3.PERSON_SCHEMA3.PERSON_MASTER
    WHERE LOCATION IS NOT NULL;
`;
 
// Execute the MERGE operation
snowflake.execute({sqlText: sqlTextMerge});
 
// Execute the first INSERT statement
snowflake.execute({sqlText: sqlTextInsert1});
 
// Execute the second INSERT statement
snowflake.execute({sqlText: sqlTextInsert2});
 
return `SUCCESS`;
$$;
 
 
 
CREATE OR REPLACE TASK ASSIGNMENT3.PERSON_SCHEMA3.PERSON_TASK
WAREHOUSE='COMPUTE_WH'
SCHEDULE='1 minute'
WHEN SYSTEM$STREAM_HAS_DATA('ASSIGNMENT3.PERSON_SCHEMA3.person_stream') AS
CALL ASSIGNMENT3.PERSON_SCHEMA3.upload_person_data()
;
 
 
ALTER TASK PERSON_TASK RESUME;
 
-- CHECKIng THE DATA.
select * from person;
 
SELECT * FROM PERSON_MASTER;
 
SELECT * FROM PERSON_AGE;
 
SELECT * FROM PERSON_LOCATION;
 